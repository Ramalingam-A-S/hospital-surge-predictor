import { NextRequest, NextResponse } from 'next/server';

// Webhook notification system for High risk alerts
// Supports: Slack, Twilio SMS, Email

interface NotificationPayload {
  hospital_id: string;
  risk: string;
  predicted_additional_patients_6h: number;
  top_action: string;
  alert_message: string;
  confidence: number;
}

// Slack webhook
async function sendSlackNotification(payload: NotificationPayload, webhookUrl: string) {
  const message = {
    text: `ðŸš¨ HOSPITAL SURGE ALERT`,
    blocks: [
      {
        type: "header",
        text: {
          type: "plain_text",
          text: "ðŸš¨ Hospital Surge Prediction Alert"
        }
      },
      {
        type: "section",
        fields: [
          {
            type: "mrkdwn",
            text: `*Hospital:*\n${payload.hospital_id}`
          },
          {
            type: "mrkdwn",
            text: `*Risk Level:*\n${payload.risk}`
          },
          {
            type: "mrkdwn",
            text: `*Predicted Surge:*\n${payload.predicted_additional_patients_6h} patients in 6h`
          },
          {
            type: "mrkdwn",
            text: `*Confidence:*\n${Math.round(payload.confidence * 100)}%`
          }
        ]
      },
      {
        type: "section",
        text: {
          type: "mrkdwn",
          text: `*Alert:* ${payload.alert_message}`
        }
      },
      {
        type: "section",
        text: {
          type: "mrkdwn",
          text: `*Recommended Action:* ${payload.top_action}`
        }
      },
      {
        type: "divider"
      },
      {
        type: "context",
        elements: [
          {
            type: "mrkdwn",
            text: `Generated by MedCentric AI at ${new Date().toLocaleString()}`
          }
        ]
      }
    ]
  };

  const response = await fetch(webhookUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(message)
  });

  return response.ok;
}

// Twilio SMS
async function sendTwilioSMS(payload: NotificationPayload, config: any) {
  const { account_sid, auth_token, from_number, to_numbers } = config;
  
  const message = `ALERT: ${payload.hospital_id} predicted surge ${payload.predicted_additional_patients_6h} patients. Action: ${payload.top_action}`;

  const results = [];
  for (const to_number of to_numbers) {
    try {
      const response = await fetch(
        `https://api.twilio.com/2010-04-01/Accounts/${account_sid}/Messages.json`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Basic ${Buffer.from(`${account_sid}:${auth_token}`).toString('base64')}`,
            'Content-Type': 'application/x-www-form-urlencoded'
          },
          body: new URLSearchParams({
            From: from_number,
            To: to_number,
            Body: message
          })
        }
      );
      results.push({ to: to_number, success: response.ok });
    } catch (error) {
      results.push({ to: to_number, success: false, error: String(error) });
    }
  }

  return results;
}

// Email notification (basic implementation)
async function sendEmailNotification(payload: NotificationPayload, config: any) {
  // This is a placeholder for email integration
  // In production, use services like SendGrid, Mailgun, or AWS SES
  
  const emailBody = `
    HOSPITAL SURGE ALERT
    
    Hospital: ${payload.hospital_id}
    Risk Level: ${payload.risk}
    Predicted Surge: ${payload.predicted_additional_patients_6h} additional patients in next 6 hours
    Confidence: ${Math.round(payload.confidence * 100)}%
    
    Alert: ${payload.alert_message}
    
    Recommended Action: ${payload.top_action}
    
    ---
    Generated by MedCentric AI at ${new Date().toLocaleString()}
  `;

  // Return mock success for demo
  return {
    success: true,
    message: 'Email notification would be sent in production',
    recipients: config.recipients || [],
    subject: `ðŸš¨ SURGE ALERT: ${payload.hospital_id}`,
    body: emailBody
  };
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { 
      hospital_id, 
      risk, 
      predicted_additional_patients_6h, 
      recommended_actions,
      alert_message,
      confidence,
      channels = ['slack']
    } = body;

    // Only trigger notifications for High risk
    if (risk !== 'High') {
      return NextResponse.json({
        success: true,
        message: 'Notification skipped - risk level not High',
        risk
      });
    }

    const top_action = recommended_actions && recommended_actions.length > 0 
      ? recommended_actions[0].detail 
      : 'Review hospital capacity immediately';

    const payload: NotificationPayload = {
      hospital_id,
      risk,
      predicted_additional_patients_6h,
      top_action,
      alert_message,
      confidence: confidence || 0.85
    };

    const results: any = {
      success: true,
      triggered_at: new Date().toISOString(),
      hospital_id,
      risk,
      channels_attempted: []
    };

    // Slack webhook
    if (channels.includes('slack')) {
      const slackWebhookUrl = process.env.SLACK_WEBHOOK_URL;
      if (slackWebhookUrl) {
        try {
          const slackSuccess = await sendSlackNotification(payload, slackWebhookUrl);
          results.channels_attempted.push({
            channel: 'slack',
            success: slackSuccess,
            message: slackSuccess ? 'Notification sent' : 'Failed to send'
          });
        } catch (error) {
          results.channels_attempted.push({
            channel: 'slack',
            success: false,
            error: String(error)
          });
        }
      } else {
        results.channels_attempted.push({
          channel: 'slack',
          success: false,
          message: 'SLACK_WEBHOOK_URL not configured'
        });
      }
    }

    // Twilio SMS
    if (channels.includes('twilio')) {
      const twilioConfig = {
        account_sid: process.env.TWILIO_ACCOUNT_SID,
        auth_token: process.env.TWILIO_AUTH_TOKEN,
        from_number: process.env.TWILIO_FROM_NUMBER,
        to_numbers: process.env.TWILIO_TO_NUMBERS?.split(',') || []
      };

      if (twilioConfig.account_sid && twilioConfig.auth_token) {
        try {
          const twilioResults = await sendTwilioSMS(payload, twilioConfig);
          results.channels_attempted.push({
            channel: 'twilio',
            success: twilioResults.every((r: any) => r.success),
            results: twilioResults
          });
        } catch (error) {
          results.channels_attempted.push({
            channel: 'twilio',
            success: false,
            error: String(error)
          });
        }
      } else {
        results.channels_attempted.push({
          channel: 'twilio',
          success: false,
          message: 'Twilio credentials not configured'
        });
      }
    }

    // Email
    if (channels.includes('email')) {
      const emailConfig = {
        recipients: process.env.EMAIL_RECIPIENTS?.split(',') || []
      };

      try {
        const emailResult = await sendEmailNotification(payload, emailConfig);
        results.channels_attempted.push({
          channel: 'email',
          success: emailResult.success,
          message: emailResult.message
        });
      } catch (error) {
        results.channels_attempted.push({
          channel: 'email',
          success: false,
          error: String(error)
        });
      }
    }

    return NextResponse.json(results);

  } catch (error) {
    console.error('Webhook notification error:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to send notifications',
        details: String(error)
      },
      { status: 500 }
    );
  }
}